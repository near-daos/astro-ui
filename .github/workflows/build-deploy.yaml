name: Build Deploy
on:
  workflow_dispatch:
    inputs:
      environment:
        required: false
        description: Specify environment to run on. Valid values are test, production
  push:
    branches:
    - develop
    - staging
    tags:
    - "**"

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  HELM_GOOGLE_ANALYTICS_KEY: ${{ secrets.GOOGLE_ANALYTICS_KEY }}
  HELM_LOG_ROCKET_APP_ID: ${{ secrets.LOG_ROCKET_APP_ID }}
  AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  KUBE_CONFIG_DATA:  ${{ secrets.KUBE_CONFIG_DATA }}
  NODE_OPTIONS: "--max-old-space-size=7168"
  HELM_NEXT_PUBLIC_LAUNCHDARKLY_ID: ${{ secrets.NEXT_PUBLIC_LAUNCHDARKLY_ID }}
  HELM_NEXT_PUBLIC_LAUNCHDARKLY_SDK_KEY: ${{ secrets.NEXT_PUBLIC_LAUNCHDARKLY_SDK_KEY }}
  HELM_OPEN_SEARCH_USERNAME: ${{ secrets.OPEN_SEARCH_USERNAME }}
  HELM_OPEN_SEARCH_PASSWORD: ${{ secrets.OPEN_SEARCH_PASSWORD }}
  HELM_DD_APPLICATION_ID: ${{ secrets.DD_APPLICATION_ID }}
  HELM_DD_CLIENT_TOKEN: ${{ secrets.DD_CLIENT_TOKEN }}

jobs:
  get-environment:
    name: Get Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.get-environment.outputs.environment }}
    steps:
    - name: get environment
      id: get-environment
      shell: bash
      run: |
        set -x
        if [[ "${{ github.ref }}" =~ ^refs/heads/develop ]]
        then
          echo "::set-output name=environment::test"
        fi
        if [[ "${{ github.event.inputs.environment }}" != "" ]]
        then
          echo "input was provided: ${{ github.event.inputs.environment }}"
          echo "::set-output name=environment::${{ github.event.inputs.environment }}"
        fi

  build-images:
    runs-on: ubuntu-latest
    name: Build Image
    needs:
    - get-environment
    steps:
    - uses: actions/checkout@v2
    - name: Set Environment
      run: |
        cat ".github/env.common" >>$GITHUB_ENV
        cat ".github/env.${{ needs.get-environment.outputs.environment }}" >>$GITHUB_ENV

    - name: Docker Build Publish
      uses: ./.github/actions/docker-build-publish

  helm-deploy:
    name: Helm Deploy
    runs-on: ubuntu-latest
    needs:
    - get-environment
    - build-images
    environment:
      name: ${{ needs.get-environment.outputs.environment }}
    steps:
    - uses: actions/checkout@v2
    - name: Set Environment
      run: |
        cat ".github/env.common" | grep -E -v '^\ *#' >>$GITHUB_ENV
        cat ".github/env.${{ needs.get-environment.outputs.environment }}" | grep -E -v '^\ *#' >>$GITHUB_ENV
    - name: Helm Deploy
      uses: near-daos/github-actions/deploy@main
      with:
        name: astro-ui
        namespace: ${{ env.DEPLOYMENT_NAMESPACE }}
        tag: ${{ github.sha }}
        chart_directory: deployment/app-chart
        debug: "true"

    - name: Tag Previous Image
      uses: tmknom/retag-ecr-action@v1
      with:
        repository-name: astro-ui
        source-tag: ${{ needs.get-environment.outputs.environment }}-current
        destination-tag: ${{ needs.get-environment.outputs.environment }}-previous

    - name: Tag Current Image
      uses: tmknom/retag-ecr-action@v1
      with:
        repository-name: astro-ui
        source-tag: ${{ github.sha }}
        destination-tag: ${{ needs.get-environment.outputs.environment }}-current

  run-autotests:
    name: Run Autotests
    needs:
    - helm-deploy
    - get-environment
    if: needs.get-environment.outputs.environment == 'test'
    uses: near-daos/astro-ui/.github/workflows/run-autotests.yaml@develop
    with:
      environment: test
      tags: smoke
      browser: chrome
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      TEST_REPO_TOKEN: ${{ secrets.TEST_REPO_TOKEN }}

#  build-deploy-storybook:
#    runs-on: ubuntu-latest
#    if: needs.get-environment.outputs.environment == 'test'
#    name: Build Deploy Storybook
#    needs:
#    - get-environment
#    environment:
#      name: ${{ needs.get-environment.outputs.environment }}
#    steps:
#    - uses: actions/checkout@v2
#    - name: Set Environment
#      run: |
#        cat ".github/env.common" >>$GITHUB_ENV
#        cat ".github/env.${{ needs.get-environment.outputs.environment }}" >>$GITHUB_ENV
#    - name: Build Deploy Storybook
#      uses: ./.github/actions/build-deploy-storybook
